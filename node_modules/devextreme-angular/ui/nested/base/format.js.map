{"version":3,"file":"format.js","sourceRoot":"","sources":["format.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;GAWG;;;;;;;AAEH,8BAA6B,6BAA6B,CAAC,CAAA;AAE3D;IAAwC,6BAAY;IAApD;QAAwC,8BAAY;IAmCpD,CAAC;IAlCG,sBAAI,+BAAQ;aAAZ;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACvC,CAAC;aACD,UAAa,KAAU;YACnB,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACvC,CAAC;;;OAHA;IAKD,sBAAI,gCAAS;aAAb;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC;aACD,UAAc,KAAU;YACpB,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;;;OAHA;IAKD,sBAAI,6BAAM;aAAV;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC;aACD,UAAW,KAAU;YACjB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACrC,CAAC;;;OAHA;IAKD,sBAAI,gCAAS;aAAb;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC;aACD,UAAc,KAAU;YACpB,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;;;OAHA;IAKD,sBAAI,2BAAI;aAAR;YACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC;aACD,UAAS,KAAU;YACf,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACnC,CAAC;;;OAHA;IAIL,gBAAC;AAAD,CAAC,AAnCD,CAAwC,4BAAY,GAmCnD;AAnCqB,iBAAS,YAmC9B,CAAA","sourcesContent":["/*!\n * devextreme-angular\n * Version: 17.1.7\n * Build date: Wed Oct 04 2017\n *\n * Copyright (c) 2012 - 2017 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\nimport { NestedOption } from '../../../core/nested-option';\n\nexport abstract class DxoFormat extends NestedOption {\n    get currency() {\n        return this._getOption('currency');\n    }\n    set currency(value: any) {\n        this._setOption('currency', value);\n    }\n\n    get formatter() {\n        return this._getOption('formatter');\n    }\n    set formatter(value: any) {\n        this._setOption('formatter', value);\n    }\n\n    get parser() {\n        return this._getOption('parser');\n    }\n    set parser(value: any) {\n        this._setOption('parser', value);\n    }\n\n    get precision() {\n        return this._getOption('precision');\n    }\n    set precision(value: any) {\n        this._setOption('precision', value);\n    }\n\n    get type() {\n        return this._getOption('type');\n    }\n    set type(value: any) {\n        this._setOption('type', value);\n    }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
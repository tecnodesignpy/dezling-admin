{
  "_args": [
    [
      {
        "raw": "devextreme-angular",
        "scope": null,
        "escapedName": "devextreme-angular",
        "name": "devextreme-angular",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Usuario\\Desktop\\TecnoDesign\\Dezling App\\admin"
    ]
  ],
  "_from": "devextreme-angular@latest",
  "_id": "devextreme-angular@17.1.7",
  "_inCache": true,
  "_location": "/devextreme-angular",
  "_nodeVersion": "8.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/devextreme-angular-17.1.7.tgz_1507125521144_0.05499590095132589"
  },
  "_npmUser": {
    "name": "devextreme",
    "email": "js@devexpress.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "devextreme-angular",
    "scope": null,
    "escapedName": "devextreme-angular",
    "name": "devextreme-angular",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://registry.npmjs.org/devextreme-angular/-/devextreme-angular-17.1.7.tgz",
  "_shasum": "a12ddfe7bf4dc7f953b47c2d61ec622745614f91",
  "_shrinkwrap": null,
  "_spec": "devextreme-angular",
  "_where": "C:\\Users\\Usuario\\Desktop\\TecnoDesign\\Dezling App\\admin",
  "author": {
    "name": "Developer Express Inc."
  },
  "bugs": {
    "url": "https://github.com/DevExpress/devextreme-angular/issues"
  },
  "dependencies": {
    "@types/jquery": "^2.0.0 || ^3.0.0",
    "jquery": "^2.0.0 || ^3.0.0"
  },
  "description": "Angular UI and visualization components based on DevExtreme widgets",
  "devDependencies": {
    "@angular/common": "^2.2.1",
    "@angular/compiler": "^2.2.1",
    "@angular/compiler-cli": "^2.2.1",
    "@angular/core": "^2.2.1",
    "@angular/forms": "^2.2.1",
    "@angular/http": "^2.2.1",
    "@angular/platform-browser": "^2.2.1",
    "@angular/platform-browser-dynamic": "^2.2.1",
    "@types/dot": "^1.0.29",
    "@types/jasmine": "2.5.38",
    "@types/jquery": "ts2.0",
    "@types/mkdirp": "^0.3.29",
    "@types/node": "^6.0.51",
    "@types/yargs": "^6.3.2",
    "codelyzer": "2.0.0-beta.4",
    "core-js": "^2.4.1",
    "del": "^2.2.0",
    "devextreme": "~17.1.4",
    "dot": "^1.0.3",
    "gulp": "^3.9.1",
    "gulp-copy": "0.0.2",
    "gulp-header": "^1.8.8",
    "gulp-jasmine": "^2.3.0",
    "gulp-merge-json": "^0.6.0",
    "gulp-rename": "^1.2.2",
    "gulp-shell": "^0.5.2",
    "gulp-sourcemaps": "^2.0.0-alpha",
    "gulp-tslint": "^7.0.1",
    "gulp-typescript": "^3.0.1",
    "gulp-uglify": "^1.5.3",
    "http-server": "0.8.5",
    "inflector-js": "^1.0.1",
    "jasmine": "2.5.2",
    "jasmine-core": "2.5.2",
    "jasmine-reporters": "2.2.0",
    "jszip": "^3.1.2",
    "karma": "^1.3.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-coverage": "^1.1.1",
    "karma-jasmine": "^1.0.2",
    "karma-junit-reporter": "^1.1.0",
    "karma-phantomjs-launcher": "^1.0.2",
    "lite-server": "^2.2.0",
    "merge-stream": "^1.0.0",
    "mkdirp": "^0.5.1",
    "remap-istanbul": "0.5.1",
    "run-sequence": "^1.2.2",
    "rxjs": "^5.0.1",
    "systemjs": "0.19.39",
    "tslint": "^4.0.2",
    "typescript": "~2.0.10",
    "yargs": "^6.0.0",
    "zone.js": "^0.7.2"
  },
  "directories": {},
  "dist": {
    "shasum": "a12ddfe7bf4dc7f953b47c2d61ec622745614f91",
    "tarball": "https://registry.npmjs.org/devextreme-angular/-/devextreme-angular-17.1.7.tgz"
  },
  "homepage": "https://github.com/DevExpress/devextreme-angular#readme",
  "keywords": [
    "angular",
    "devextreme",
    "devexpress"
  ],
  "license": "MIT",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "devextreme",
      "email": "chartjs@devexpress.com"
    }
  ],
  "name": "devextreme-angular",
  "optionalDependencies": {},
  "peerDependencies": {
    "devextreme": "~17.1.4",
    "@angular/core": "^2.2.1 || ^4.0.0",
    "@angular/common": "^2.2.1 || ^4.0.0",
    "@angular/forms": "^2.2.1 || ^4.0.0"
  },
  "readme": "[![Run Status](https://api.shippable.com/projects/575802872a8192902e22e62a/badge?branch=master)](https://app.shippable.com/projects/575802872a8192902e22e62a) [![npm version](https://badge.fury.io/js/devextreme-angular.svg)](https://badge.fury.io/js/devextreme-angular)\r\n\r\n# Angular UI and Visualization Components Based on DevExtreme Widgets #\r\n\r\nThis project allows you to use [DevExtreme Widgets](http://js.devexpress.com/Demos/WidgetsGallery/) in [Angular](https://angular.io/) applications.\r\n\r\n* [Getting started](#getting-started)\r\n  * [Prerequisites](#prerequisites)\r\n  * [DevExtreme installation](#add-to-existing-app)\r\n  * [Starting a new application](#create-application)\r\n  * [Running the local examples](#running-examples)\r\n* [Usage samples](#usage-samples)\r\n  * [Static string option value](#static-option)\r\n  * [Static non-string option value](#static-non-string-option)\r\n  * [Event handling](#event-handling)\r\n  * [Callback functions](#callback-functions)\r\n  * [One-way option binding](#one-way-binding)\r\n  * [Two-way option binding](#two-way-binding)\r\n  * [Custom templates](#custom-templates)\r\n  * [Data layer](#data-layer)\r\n  * [DevExtreme utils](#devextreme-utils)\r\n  * [Components with transcluded content](#components-with-transcluded-content)\r\n  * [Angular forms](#angular-forms)\r\n  * [Using DevExtreme validation features](#devextreme-validation-features)\r\n  * [Configuration components](#configuration-components)\r\n  * [Accessing a DevExtreme widget instance](#accessing-widget-instance)\r\n  * [Angular change detection](#angular-change-detection)\r\n* [Demos](#demos)\r\n* [API reference](#api-reference)\r\n* [Bundle size optimization](#bundle-optimization)\r\n* [Server-side rendering](#server-side-rendering)\r\n* [License](#license)\r\n* [Support & feedback](#support-feedback)\r\n\r\n## <a name=\"getting-started\"></a>Getting Started ##\r\n\r\nYou have the following options to start:\r\n\r\n* [Play around with our Plunker](http://plnkr.co/edit/XuAPDd?p=preview) without installing anything\r\n* [Add DevExtreme to your existing Angular application](#add-to-existing-app)\r\n* [Creating a new Angular application](#create-application) and install DevExtreme\r\n* [Run the local examples](#running-examples)\r\n\r\n### <a name=\"prerequisites\"></a>Prerequisites ###\r\n\r\n<a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" title=\"Installing Node.js and updating npm\">Node.js and npm</a> are\r\nrequired and essential to Angular development.\r\n\r\n<a href=\"https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md\" target=\"_blank\" title=\"Installing Gulp\">Gulp</a> is\r\nrequired to build the project and run tests.\r\n\r\n### <a name=\"add-to-existing-app\"></a>Adding DevExteme to an Existing Angular Application ###\r\n\r\n#### <a name=\"installation\"></a>Install DevExtreme ####\r\n\r\nInstall the **devextreme** and **devextreme-angular** npm packages:\r\n\r\n```bash\r\nnpm install --save devextreme devextreme-angular\r\n```\r\n\r\n#### <a name=\"additional-configuration\"></a>Additional Configuration ####\r\n\r\nThe further configuration steps depend on which build tool, bundler or module loader you are using. Please choose the one you need:\r\n\r\n* [Configuring SystemJS](https://github.com/DevExpress/devextreme-angular/blob/master/docs/using-systemjs.md#configuration)\r\n* [Configuring Angular CLI](https://github.com/DevExpress/devextreme-angular/blob/master/docs/using-angular-cli.md#configuration)\r\n* [Configuring Webpack](https://github.com/DevExpress/devextreme-angular/blob/master/docs/using-webpack.md#configuration)\r\n* [Configuring Rollup](https://github.com/DevExpress/devextreme-angular/blob/master/docs/using-rollup.md#configuration)\r\n* [Configuring Ionic 2](https://github.com/DevExpress/devextreme-angular/blob/master/docs/using-ionic2.md#configuration)\r\n\r\n#### <a name=\"import-modules\"></a>Import DevExtreme Modules ####\r\n\r\nGo to your main .ts file (usually *src/app.module.ts*) and import the required modules to your app:\r\n\r\n```js\r\n...\r\nimport { DxButtonModule } from 'devextreme-angular';\r\n\r\n@NgModule({\r\n    ...\r\n    imports: [\r\n        ...\r\n        DxButtonModule,\r\n        ...\r\n    ]\r\n})\r\nexport class AppModule {}\r\n```\r\n\r\nNote, you can import the **DevExtremeModule** module to include all the DevExtreme components at once, but it might affect the final bundle size and startup time.\r\nCheck the [bundle optimization](#bundle-optimization) section for more info.\r\n\r\n#### Use DevExtreme Components  ####\r\n\r\nNow you can use a DevExteme component in your application:\r\n\r\n```js\r\n@Component({\r\n    selector: 'my-app',\r\n    template: '<dx-button text=\"Press me\" (onClick)=\"helloWorld()\"></dx-button>'\r\n})\r\nexport class AppComponent {\r\n    helloWorld() {\r\n        alert('Hello world!');\r\n    }\r\n}\r\n```\r\n\r\n### <a name=\"create-application\"></a>Create a new Angular Application ###\r\n\r\nDepending on your requirements you can choose one of the following ways to start:\r\n\r\n* [Start with SystemJS](https://github.com/DevExpress/devextreme-angular/blob/master/docs/using-systemjs.md)\r\n* [Start with Angular CLI](https://github.com/DevExpress/devextreme-angular/blob/master/docs/using-angular-cli.md)\r\n* [Start with Webpack](https://github.com/DevExpress/devextreme-angular/blob/master/docs/using-webpack.md)\r\n* [Start with Rollup](https://github.com/DevExpress/devextreme-angular/blob/master/docs/using-rollup.md)\r\n* [Start with Ionic 2](https://github.com/DevExpress/devextreme-angular/blob/master/docs/using-ionic2.md)\r\n\r\n### <a name=\"running-examples\"></a>Running the Local Examples ###\r\n\r\n```bash\r\n# clone our repo\r\n# --depth 1 removes all but one .git commit history\r\ngit clone --depth 1 https://github.com/DevExpress/devextreme-angular.git\r\n\r\n# change directory to our repo\r\ncd devextreme-angular\r\n\r\n# install the repo with npm\r\nnpm install\r\n\r\n# start the web-server\r\nnpm start\r\n\r\n```\r\n\r\nNavigate to [http://127.0.0.1:8875/examples/](http://127.0.0.1:8875/examples/) in the opened browser window. Explore the **examples** folder of this repository for the examples source code.\r\n\r\n## <a name=\"usage-samples\"></a>Usage Samples ##\r\n\r\n### <a name=\"static-option\"></a>Static String Option Value ###\r\n\r\nTo specify a string widget's option statically\r\n(the [text](http://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxButton/Configuration/#text)\r\noption of dxButton):\r\n\r\n```html\r\n<dx-button text=\"Simple button\"></dx-button>\r\n```\r\n\r\n### <a name=\"static-non-string-option\"></a>Static Non-string Option Value ###\r\n\r\nTo specify a non-string widget's option statically\r\n(the [disabled](http://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxButton/Configuration/#disabled)\r\noption of dxButton):\r\n\r\n```html\r\n<dx-button [disabled]=\"false\"></dx-button>\r\n```\r\n\r\n### <a name=\"event-handling\"></a>Event Handling ###\r\n\r\nTo bind the dxButton’s [click](http://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxButton/Events/#click) event:\r\n\r\n```html\r\n<dx-button (onClick)=\"handler()\"></dx-button>\r\n```\r\n\r\n### <a name=\"callback-functions\"></a>Callback Functions ###\r\n\r\nTo specify a widget's option using a callback function (the [layer.customize](https://js.devexpress.com/Documentation/ApiReference/Data_Visualization_Widgets/dxVectorMap/Configuration/layers/#customize)\r\noption of dxVectorMap):\r\n\r\n```html\r\n<dx-vector-map>\r\n    ...\r\n    <dxi-layer\r\n        ...\r\n        [customize]=\"customizeLayers\">\r\n    </dxi-layer>\r\n</dx-vector-map>\r\n```\r\n\r\nNote that callback functions are executed _outside_ the context of the component, but if the context is important, you can explicitly bind it to the callback function in the constructor.\r\n\r\n```js\r\nconstructor() {\r\n    this.customizeLayers = this.customizeLayers.bind(this);\r\n}\r\n\r\ncustomizeLayers(elements) {\r\n    let country = this.myCountry;\r\n    ...\r\n}\r\n```\r\n\r\n### <a name=\"one-way-binding\"></a>One-way Option Binding ###\r\n\r\nIf we want changes to the value of ‘bindingProperty’ of the host component to propagate to the\r\n[value](http://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxTextBox/Configuration/#value) of the dxTextBox widget,\r\na one-way binding approach is used:\r\n\r\n```html\r\n<dx-text-box [value]=\"bindingProperty\"></dx-text-box>\r\n```\r\n\r\n### <a name=\"two-way-binding\"></a>Two-way Option Binding ###\r\n\r\nIn addition to the one-way binding, we can also perform two-way binding, which propagates changes from the bindingProperty to the widget\r\nor vice versa from the widget to the bindingProperty:\r\n\r\n```html\r\n<dx-text-box [(value)]=\"bindingProperty\"></dx-text-box>\r\n```\r\n\r\n### <a name=\"custom-templates\"></a>Custom Templates ###\r\n\r\nIn case you want to customize the rendering of a DevExtreme widget, we support custom templates. For instance, we can specify\r\nthe [itemTemplate](http://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxList/Configuration/#itemTemplate)\r\nand [groupTemplate](http://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxList/Configuration/#groupTemplate)\r\nof the dxList widget as follows:\r\n\r\n```html\r\n<dx-list [grouped]=\"true\" [items]=\"grouppedItems\">\r\n    <div *dxTemplate=\"let itemData of 'item'; let itemIndex = index\">\r\n        {{itemIndex}} - {{itemData.someProperty}}\r\n    </div>\r\n    <div *dxTemplate=\"let groupData of 'group'\">\r\n        {{groupData.someProperty}}\r\n    </div>\r\n</dx-list>\r\n```\r\nThe local 'itemData' and 'groupData' variables (that are declared via the 'let' keyword) expose the corresponding item data object. You can use it to\r\nrender the data where you need inside the template.\r\n\r\nThe 'item' and 'group' names are default template names for the 'itemTemplate' and 'groupTemplate' options of the dxList widget.\r\n\r\n### <a name=\"data-layer\"></a>Data Layer ###\r\n\r\nThe DevExtreme framework includes a data layer, which is a set of complementary components that enable you to read and write data.\r\nFor more details please refer to [the documentation on the official website](https://js.devexpress.com/Documentation/Guide/Data_Layer/Data_Layer/).\r\n\r\n### <a name=\"devextreme-utils\"></a>DevExtreme Utils ###\r\n\r\nThe DevExtreme provides utils that can be used in different application parts such as widgets and data. For more details please refer to [the documentation on the official website](https://js.devexpress.com/Documentation/ApiReference/Common/utils/).\r\n\r\n### <a name=\"components-with-transcluded-content\"></a>Components with Transcluded Content ###\r\n\r\nIn addition to using dxTemplate, it is possible to put the content of the following widgets directly into the markup:\r\n[dxResizable](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxResizable/),\r\n[dxScrollView](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxScrollView/),\r\n[dxValidationGroup](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxValidationGroup/).\r\nFor instance, we can set the content for\r\nthe [dxScrollView](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxScrollView/) widget as shown below:\r\n\r\n```html\r\n<dx-scroll-view>\r\n    <div>Some scrollable content</div>\r\n</dx-scroll-view>\r\n```\r\n\r\n### <a name=\"angular-forms\"></a>Angular Forms ###\r\n\r\nThe DevExtreme Angular editors support the 'ngModel' binding as well as the 'formControlName' directive, which are necessary for the\r\n[Angular forms](https://angular.io/docs/ts/latest/guide/forms.html) features.\r\n\r\n```html\r\n<form [formGroup]=\"form\">\r\n        <dx-text-box\r\n            name=\"email\"\r\n            [(ngModel)]=\"email\"\r\n            [isValid]=\"emailControl.valid || emailControl.pristine\"\r\n            [validationError]=\"{ message: 'Email is invalid'}\">\r\n        </dx-text-box>\r\n</form>\r\n```\r\n\r\n\r\n```js\r\n@Component({\r\n   selector: 'my-app',\r\n   templateUrl: 'app/app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n   email: string;\r\n   emailControl: AbstractControl;\r\n   form: FormGroup;\r\n   ngOnInit() {\r\n       this.form = new FormGroup({\r\n           email: new FormControl('', Validators.compose([Validators.required, CustomValidator.mailFormat]))\r\n       });\r\n       this.emailControl = this.form.controls['email'];\r\n   }\r\n}\r\n```\r\n\r\n### <a name=\"devextreme-validation-features\"></a>Using DevExtreme Validation Features ###\r\n\r\nYou can use the [built-in validators](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxValidator/Validation_Rules/),\r\nvalidation summary and other DevExtreme validation features with Angular DevExtreme editors.\r\n\r\n\r\n```html\r\n<dx-validation-group>\r\n\r\n    <dx-text-box [(value)]=\"email\">\r\n        <dx-validator [validationRules]=\"validationRules.email\"></dx-validator>\r\n    </dx-text-box>\r\n    <dx-text-box [(value)]=\"password\" mode=\"password\">\r\n        <dx-validator [validationRules]=\"validationRules.password\"></dx-validator>\r\n    </dx-text-box>\r\n\r\n    <dx-validation-summary></dx-validation-summary>\r\n\r\n    <dx-button (onClick)=\"validate($event)\" text=\"Submit\"></dx-button>\r\n\r\n</dx-validation-group>\r\n```\r\n\r\n\r\n```js\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: 'app/app.component.html'\r\n})\r\nexport class AppComponent {\r\n    email: string;\r\n    password: string;\r\n    validationRules = {\r\n        email: [\r\n            { type: 'required', message: 'Email is required.' },\r\n            { type: 'email', message: 'Email is invalid.' }\r\n        ],\r\n        password: [\r\n            { type: 'required', message: 'Email is required.' }\r\n        ]\r\n    };\r\n    validate(params) {\r\n        let result = params.validationGroup.validate();\r\n        if (result.isValid) {\r\n            // form data is valid\r\n            // params.validationGroup.reset();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### <a name=\"configuration-components\"></a>Configuration Components ###\r\n\r\nYou can use `dxo-` ('o' is a contraction of 'option') prefixed components to configure complex nested options for widgets.\r\nThe following example demonstrates how to configure the [tooltip](https://js.devexpress.com/Documentation/ApiReference/Data_Visualization_Widgets/dxTreeMap/Configuration/tooltip/) option of the dxTreeMap widget:\r\n\r\n```html\r\n<dx-tree-map [dataSource]=\"treeData\">\r\n    <dxo-tooltip [enabled]=\"showTooltip\" format=\"thousands\"></dxo-tooltip>\r\n</dx-tree-map>\r\n\r\n<dx-button text=\"Toggle tooltip\" (onClick)=\"toggleTooltip()\"></dx-button>\r\n```\r\n\r\n```js\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: 'app/app.component.html'\r\n})\r\nexport class AppComponent {\r\n    treeData = ...;\r\n    showTooltip = false;\r\n    toggleTooltip() {\r\n        this.showTooltip = !this.showTooltip;\r\n    }\r\n}\r\n```\r\n\r\nYou can also use `dxi-` ('i' is a contraction of 'item') prefixed components to configure complex collection options for widgets.\r\nThe following example demonstrates how to configure the [columns](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxDataGrid/Configuration/columns/) option of the dxDataGrid widget:\r\n\r\n```html\r\n<dx-data-grid [dataSource]=\"data\">\r\n    <dxi-column dataField=\"firstName\" caption=\"First Name\"></dxi-column>\r\n    <dxi-column dataField=\"lastName\" caption=\"Last Name\" [visible]=\"showLastName\"></dxi-column>\r\n</dx-data-grid>\r\n\r\n<dx-button text=\"Toggle the 'Last Name' column\" (onClick)=\"toggleLastName()\"></dx-button>\r\n```\r\n\r\n```js\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: 'app/app.component.html'\r\n})\r\nexport class AppComponent {\r\n    data = ...;\r\n    showLastName = false;\r\n    toggleLastName() {\r\n        this.showLastName = !this.showLastName;\r\n    }\r\n}\r\n```\r\n\r\nTo configure options that can accept a configuration object or an array of configuration objects, use `dxi-` prefixed components.\r\nThe following example demonstrates how to configure the [valueAxis](https://js.devexpress.com/Documentation/ApiReference/Data_Visualization_Widgets/dxChart/Configuration/valueAxis/) option of the dxChart widget:\r\n\r\n```html\r\n<dx-chart [dataSource]=\"data\">\r\n    <dxi-series valueField=\"value\" argumentField=\"argument\"></dxi-series>\r\n    <dxi-value-axis>\r\n        <dxo-label format=\"millions\"></dxo-label>\r\n    </dxi-value-axis>\r\n</dx-chart>\r\n```\r\n\r\n```js\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: 'app/app.component.html'\r\n})\r\nexport class AppComponent {\r\n    data = ...;\r\n}\r\n```\r\n\r\nIt is possible to specify an item template inside the `dxi-` prefixed components and use Angular\r\n[structural directives](https://angular.io/docs/ts/latest/guide/structural-directives.html) such as ngFor. Note that\r\nthe available item properties are described in the [Default Item Template](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxList/Default_Item_Template/)\r\nsection of a corresponding widget documentation reference.\r\n\r\n```html\r\n<dx-list>\r\n    <dxi-item>\r\n        <h1>Items available</h1>\r\n    </dxi-item>\r\n    <dxi-item *ngFor=\"let item of listItems\" [badge]=\"item.badge\">\r\n        <h2>{{item.text}}</h2>\r\n    </dxi-item>\r\n</dx-list>\r\n```\r\n\r\n```js\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: 'app/app.component.html'\r\n})\r\nexport class AppComponent {\r\n    listItems = [\r\n        {\r\n            text: 'Cars',\r\n            badge: '12'\r\n        },\r\n        {\r\n            text: 'Bikes',\r\n            badge: '5'\r\n        }\r\n    ];\r\n}\r\n```\r\n\r\nIf your item template contains some *nested* components, declare it using the parameterless `dxTemplate` structural directive as follows:\r\n\r\n```html\r\n<dx-list>\r\n    <dxi-item>\r\n        <div *dxTemplate>\r\n            <dx-button text=\"I'm a nested child component\"></dx-button>\r\n        </div>\r\n    </dxi-item>\r\n</dx-list>\r\n```\r\n\r\nAngular has a built-in `template` directive. To define the `template` property of the configuration component (for example, `dxo-master-detail`), use the following code:\r\n```html\r\n<dxo-master-detail [template]=\"'masterDetail'\"></dxo-master-detail>\r\n```\r\n\r\nNote that some options with an object type are not implemented as nested components - for example, \r\n[editorOptions of dxDataGrid](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxDataGrid/Configuration/columns/#editorOptions), [editorOptions of dxForm](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxForm/Item_Types/SimpleItem/#editorOptions), [the widget option of dxToolbar](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxToolbar/Default_Item_Template/#options).\r\n\r\n### <a name=\"accessing-widget-instance\"></a>Accessing a DevExtreme Widget Instance ###\r\n\r\nYou can access a DevExtreme widget instance using the `@ViewChild` or `@ViewChildren` decorator (depending on whether you are getting just one or several instances of one widget) and the component's\r\n'instance' property. Both decorators accept a component name or a [template reference variable](https://angular.io/guide/template-syntax#template-reference-variables--var-). In the example below, the\r\n[refresh](https://js.devexpress.com/Documentation/ApiReference/UI_Widgets/dxDataGrid/Methods/#refresh)\r\nmethod of the dxDataGrid is called:\r\n\r\n```js\r\nimport { Component, ViewChild } from '@angular/core';\r\nimport { DxDataGridComponent } from \"devextreme-angular\";\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    template: `\r\n        <dx-data-grid #targetDataGrid [dataSource]=\"dataSource\"></dx-data-grid>\r\n        <dx-button text=\"Refresh data\" (onClick)=\"refresh()\"></dx-button>\r\n    `\r\n})\r\nexport class AppComponent implements OnChanges {\r\n    @ViewChild(DxDataGridComponent) dataGrid:DxDataGridComponent\r\n    // or\r\n    // @ViewChild(\"targetDataGrid\") dataGrid: DxDataGridComponent\r\n    refresh() {\r\n        this.dataGrid.instance.refresh();\r\n    }\r\n}\r\n```\r\n\r\nTo access a DevExtreme widget instance in markup, you can use the same template reference variables. The following example demonstrates how you can get a dxSelectBox value in the template.\r\n\r\n```html\r\n<dx-select-box #selectbox [items]=\"items\"></dx-select-box>\r\n{{selectbox.value}}\r\n```\r\n\r\n### <a name=\"angular-change-detection\"></a>Angular Change Detection ###\r\n\r\nBy default, in Angular, options changes are checked on each user action.\r\nIf you bind a widget option to this function, it should return a static object.\r\nOtherwise, Angular considers that the option is constantly changed after each user action.\r\nAlternatively, you can change the default behavior and set the [ChangeDetectionStrategy](https://angular.io/docs/ts/latest/api/core/index/ChangeDetectionStrategy-enum.html) component option to \"OnPush\".\r\n\r\n```js\r\nimport {Component, ChangeDetectionStrategy} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    ....\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n```\r\n\r\n## <a name=\"demos\"></a>Demos ##\r\n\r\n* [GolfClub real-world application](https://devexpress.github.io/golfclub/) ([sources](https://github.com/DevExpress/golfclub))\r\n* [Lots of feature-based examples](https://js.devexpress.com/Demos/WidgetsGallery/Demo/Data_Grid/LocalDataSource/Angular/Light/)\r\n\r\n## <a name=\"api-reference\"></a>API Reference ##\r\n\r\nDevExtreme Angular components mirror\r\n[DevExtreme JavaScript API](http://js.devexpress.com/Documentation/ApiReference/) but use\r\n[Angular syntax](#usage-samples) for specifying widget options, subscribing to events and custom templates declaration.\r\n\r\n## <a name=\"bundle-optimization\"></a>Bundle Size Optimization ##\r\n\r\n### Bundlers with Tree Shaking Support ###\r\n\r\n*Tree shaking* can greatly reduce the downloaded size of the application by removing unused portions of both source and library code. There are a number of\r\nbundlers with tree shaking support, such as Webpack 2, Rollup, SystemJS Bundler, etc. Due to specifics of the tree shaking algorithm, your project typescript sources should\r\nbe prepared accordingly to make tree shaking available. This preparations are [performed by the Angular Compiler](https://angular.io/docs/ts/latest/cookbook/aot-compiler.html#!#tree-shaking).\r\nYou can follow one of the existing guides to configure tree shaking with your bundler ([Webpack 2](http://blog.rangle.io/optimize-your-angular2-application-with-tree-shaking/),\r\n[Angular CLI](https://github.com/angular/angular-cli#bundling),\r\n[Rollup](https://angular.io/docs/ts/latest/cookbook/aot-compiler.html#!#tree-shaking)).\r\n\r\nTo make it work with DevExtreme Angular package, you just need to import only the modules required in your application, not the whole DevExtremeModule. For instance,\r\nyou can import only DxButtonModule as follows:\r\n\r\n```js\r\nimport { DxButtonModule } from 'devextreme-angular';\r\n```\r\n\r\nNote, AOT Compilation also decreases a bundle size by precompiling your HTML templates. So, the markup and the template compiler are not included into the final bundle.\r\n\r\n### Bundlers without Tree Shaking Support  ###\r\n\r\nIf you are not going to configure tree shaking, you can optimize your bundle size by using imports from specific modules, not from the main 'devextreme-angular' module. You can do this\r\nas follows:\r\n\r\n```js\r\nimport { DxButtonModule } from 'devextreme-angular/ui/button';\r\n```\r\n\r\n## <a name=\"server-side-rendering\"></a>Server-side Rendering ##\r\n\r\nCurrently, DevExtreme components **do not support** server side rendering (check [this issue](https://github.com/DevExpress/devextreme-angular/issues/46)).\r\nSo, you are required to switch this feature off.\r\n\r\n## <a name=\"license\"></a>License ##\r\n\r\nFamiliarize yourself with the\r\n[DevExtreme License](https://js.devexpress.com/Licensing/).\r\n[Free trial is available!](http://js.devexpress.com/Buy/)\r\n\r\n**DevExtreme Angular components are released as a MIT-licensed (free and open-source) add-on to DevExtreme.**\r\n\r\n## <a name=\"support-feedback\"></a>Support & Feedback ##\r\n\r\n* For general Angular topics, follow [these guidelines](https://github.com/angular/angular/blob/master/CONTRIBUTING.md)\r\n* For questions regarding DevExtreme libraries and JavaScript API, use [DevExpress Support Center](https://www.devexpress.com/Support/Center)\r\n* For DevExtreme Angular integration bugs, questions and suggestions, use the [GitHub issue tracker](https://github.com/DevExpress/devextreme-angular/issues)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DevExpress/devextreme-angular.git"
  },
  "scripts": {
    "build": "gulp build",
    "lite": "lite-server",
    "pack": "gulp npm.pack",
    "serve": "http-server -c-1 -o -p 8875 .",
    "start": "npm run build && npm run serve",
    "test": "gulp test"
  },
  "typings": "/index.d.ts",
  "version": "17.1.7"
}
